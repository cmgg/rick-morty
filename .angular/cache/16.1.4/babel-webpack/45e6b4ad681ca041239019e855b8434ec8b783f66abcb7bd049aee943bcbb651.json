{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = 'https://rickandmortyapi.com/api/';\n    this.pagin = 'https://rickandmortyapi.com/api/character/?page=';\n  }\n  getPersonajes(pagina) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    if (pagina == \"\") return this._http.get(this.url + 'character/');else return this._http.get(this.pagin + pagina);\n  }\n  getPersonaje(id) {\n    return this._http.get(this.url + 'character/' + id);\n  }\n  getlocation(id) {\n    return this._http.get(this.url + 'location/' + id);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","ApiService","constructor","_http","url","pagin","getPersonajes","pagina","headers","get","getPersonaje","id","getlocation","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/carlos/git/rick-morty/api-RYM/src/app/servicio/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders,HttpParams } from \"@angular/common/http\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n   public url='https://rickandmortyapi.com/api/';\n  public pagin='https://rickandmortyapi.com/api/character/?page=';\n  constructor(private _http: HttpClient) { }\n\n\n  getPersonajes(pagina:any){\n    let headers = new HttpHeaders({'Content-Type':'application/json'});\n    \n      if(pagina==\"\")\n      return this._http.get<any>(this.url+'character/');\n      else\n      return this._http.get<any>(this.pagin+pagina);\n    \n    \n  }\n  getPersonaje(id:any){\n    return this._http.get<any>(this.url+'character/'+id);\n\n  }\n  getlocation(id:any){\n    return this._http.get<any>(this.url+'location/'+id);\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAmB,sBAAsB;;;AAMzE,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAFjB,KAAAC,GAAG,GAAC,kCAAkC;IACvC,KAAAC,KAAK,GAAC,kDAAkD;EACtB;EAGzCC,aAAaA,CAACC,MAAU;IACtB,IAAIC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAAC,cAAc,EAAC;IAAkB,CAAC,CAAC;IAEhE,IAAGO,MAAM,IAAE,EAAE,EACb,OAAO,IAAI,CAACJ,KAAK,CAACM,GAAG,CAAM,IAAI,CAACL,GAAG,GAAC,YAAY,CAAC,CAAC,KAElD,OAAO,IAAI,CAACD,KAAK,CAACM,GAAG,CAAM,IAAI,CAACJ,KAAK,GAACE,MAAM,CAAC;EAGjD;EACAG,YAAYA,CAACC,EAAM;IACjB,OAAO,IAAI,CAACR,KAAK,CAACM,GAAG,CAAM,IAAI,CAACL,GAAG,GAAC,YAAY,GAACO,EAAE,CAAC;EAEtD;EACAC,WAAWA,CAACD,EAAM;IAChB,OAAO,IAAI,CAACR,KAAK,CAACM,GAAG,CAAM,IAAI,CAACL,GAAG,GAAC,WAAW,GAACO,EAAE,CAAC;EACrD;;AAvBWV,UAAU,C;mBAAVA,UAAU,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAVf,UAAU,C;SAAVA,UAAU;EAAAgB,OAAA,EAAVhB,UAAU,CAAAiB,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}